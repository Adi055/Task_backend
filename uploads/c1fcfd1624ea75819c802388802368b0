import React, { useState } from "react";
import bcrypt from 'bcryptjs';

// Generate a cryptographic key
async function generateKey() {
  const key = await window.crypto.subtle.generateKey(
    {
      name: 'AES-GCM',
      length: 256,
    },
    true,
    ['encrypt', 'decrypt']
  );
    console.log(key, 'key')
  return key;
}

// Encrypt data using a cryptographic key
async function encryptData(key, data) {
  const encodedData = new TextEncoder().encode(data);
  const iv = window.crypto.getRandomValues(new Uint8Array(12));
  const encryptedData = await window.crypto.subtle.encrypt(
    {
      name: 'AES-GCM',
      iv: iv,
    },
    key,
    encodedData
  );
  return { iv: iv, encryptedData: encryptedData };
}

// Decrypt data using a cryptographic key
async function decryptData(key, iv, encryptedData) {
  const decryptedData = await window.crypto.subtle.decrypt(
    {
      name: 'AES-GCM',
      iv: iv,
    },
    key,
    encryptedData
  );
  const decodedData = new TextDecoder().decode(decryptedData);
  return decodedData;
}


const PassordHashing = () => {
  const [formData, setFormData] = useState({
    name: "",
    password:""
  });

  const handleSubmit = async (event) => {
    event.preventDefault();

  //  const key = await generateKey();
  // const encrypted = await encryptData(key, formData.password);
  // const decrypted = await decryptData(key, encrypted.iv, encrypted.encryptedData);
  // console.log('Decrypted data:', decrypted);

  // Encrypt the password
  const hashedPassword = await bcrypt.hash(formData.password, 10);


    try {
      const response = await fetch("https://api.example.com/submit", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({...formData, password:hashedPassword}),
      });

      if (response.ok) {
        // Successful submission
        console.log("Form submitted successfully!");
        // Reset form data
        setFormData({
          name: "",
          email: "",
          message: "",
        });
      } else {
        // Error occurred
        console.log("Form submission failed!");
      }
    } catch (error) {
      // Error occurred
      console.log("Error:", error);
    }
  };

  const handleChange = (event) => {
    const { name, value } = event.target;
    setFormData((prevFormData) => ({
      ...prevFormData,
      [name]: value,
    }));
  };

  return (
    <div className="container">
      <form onSubmit={handleSubmit}>
        <div className="mb-3">
          <label for="exampleInputEmail1" className="form-label">
            Name
          </label>
          <input
            type="text"
            className="form-control"
            id="exampleInputEmail1"
            aria-describedby="emailHelp"
            name="name"
            value={formData.name}
            onChange={handleChange}
          />
         
        </div>
        <div className="mb-3">
          <label for="exampleInputPassword1" className="form-label">
            Password
          </label>
          <input
            type="password"
            className="form-control"
            id="exampleInputPassword1"
            name="password"
            value={formData.password}
            onChange={handleChange}
          />
        </div>
       
        <button type="submit" className="btn btn-primary">
          Submit
        </button>
      </form>
    </div>
  );
};

export default PassordHashing;
